#version 450

layout(location = 0) in vec3 inPosition;
layout(location = 1) in vec3 inColor;
layout(location = 2) in vec3 inNormal;
layout(location = 3) in vec2 inUv;

layout(location = 0) out vec3 fragColor;
layout(location = 1) out vec3 fragWorldNormal;

layout(set = 0, binding = 0) uniform GlobalUbo
{
  mat4 projectionMatrix;
  mat4 viewMatrix;
  vec4 ambientLight;
  vec3 lightPosition;
  vec4 lightColor;
  ivec2 windowSize;
  float lightAttenuation;
} ubo;

layout(push_constant) uniform Push {
  mat4 modelMatrix;
  mat4 normalMatrix; // mat4 instead of mat3 because of alignment
} push;


void main()
{
  gl_Position = ubo.projectionMatrix * ubo.viewMatrix * push.modelMatrix * vec4(inPosition, 1.0);;

  fragWorldNormal = normalize(mat3(push.normalMatrix) * inNormal);
  fragColor = inColor;
}

#if 0
/*
  void pointLight()
  {
    vec4 vertexWorldPos = push.modelMatrix * vec4(inPosition, 1.0f);
    gl_Position = ubo.projectionViewMatrix * vertexWorldPos;

    vec3 directionToLight = ubo.lightPosition - vertexWorldPos.xyz;
    float attenuation = 1.0 / dot(directionToLight, directionToLight);

    vec3 normalWorldSpace = normalize(mat3(push.normalMatrix) * inNormal);
    float cosAngIncidence = clamp(dot(normalWorldSpace, normalize(directionToLight)), 0, 1);

    vec3 lightColor = ubo.lightColor.xyz * ubo.lightColor.w * attenuation; // apply intensity + attenuation
    vec3 ambientLight = ubo.ambientLight.xyz * ubo.ambientLight.w; // apply intensity
    vec3 diffuseLight = lightColor * cosAngIncidence;
    fragColor = (diffuseLight + ambientLight) * inColor;
  }

  void fragPointLight()
  {
  }
*/
#endif
